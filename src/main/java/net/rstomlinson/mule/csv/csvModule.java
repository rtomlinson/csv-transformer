/**
 * This file was automatically generated by the Mule Development Kit
 */
package net.rstomlinson.mule.csv;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import net.sf.flatpack.DataSet;
import net.sf.flatpack.DefaultParserFactory;
import net.sf.flatpack.Parser;

import org.mule.api.annotations.Module;
import org.mule.api.annotations.Transformer;

/**
 * CSV Transformer
 *
 * @author Richard Tomlinson
 */
@Module(minMuleVersion="3.4.0", name="csv", schemaVersion="1.0-SNAPSHOT", friendlyName="CSV to Maps")
public class csvModule
{

	/**
     * Transformer to convert a comma seperated CSV to a POJO
     *
     * {@sample.xml ../../../doc/csv-connector.xml.sample csv:csv-to-maps-comma-separated}
     * @param source Source object
     * @return Transformed object
     */
    @Transformer(sourceTypes={InputStream.class})
    public static ArrayList<Map<String, String>> csvToMapsCommaSeparated(InputStream source)
    {
    	return parseCSV(',','"', source);
    }
    
    /**
     * Transformer to convert a pipe delimited CSV to a POJO
     *
     * {@sample.xml ../../../doc/csv-connector.xml.sample csv:csv-to-maps-pipe-delimited}
     * @param source Source object
     * @return Transformed object
     */
    @Transformer(sourceTypes={InputStream.class})
    public static ArrayList<Map<String, String>> csvToMapsPipeDelimited(InputStream source)
    {
    	 return parseCSV('|','"', source);
    }
    
    private static ArrayList<Map<String, String>> parseCSV(char delimiter, char qualifier, InputStream csv){
		
    	Parser parser = DefaultParserFactory.getInstance().newDelimitedParser(new InputStreamReader(csv), delimiter, qualifier);
    	DataSet ds = parser.parse();
    	
    	ArrayList<Map<String, String>> newMap = new ArrayList<Map<String, String>>();
    	
		while (ds.next()){
    		Map<String, String> csvRow = new HashMap<String, String>();
    		String[] columnNames = ds.getColumns();
    		for (String column : columnNames) {
    			csvRow.put(column, ds.getString(column));
    		}
    		newMap.add(csvRow);
    	}
    	return newMap;
    }
}
